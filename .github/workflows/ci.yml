name: Isort

## Run this workflow every time a new commit pushed to your repository
#on:
#  push:
#    branches:
#      - master
#    tags:
#    paths:
#      - '**.py'
#  pull_request:
#    paths:
#      - '**.py'
# Run this workflow every time a new commit pushed to your repository
on: push

env:
  IMAGE_NAME: maykinmedia/open-personen

jobs:
  openapiCheck:
    name: Check isort
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt
          sudo npm install -g swagger2openapi@5.2.5
          sudo npm install -g openapi-diff@0.23.3
      - name: Run openapi check
        run: |
          generate_schema
          wget https://raw.githubusercontent.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/v1.0.0/specificatie/openapi.yaml
          openapi-diff openapi.yaml src/openapi.yaml
        env:
          DJANGO_SETTINGS_MODULE: openpersonen.conf.ci
          VIRTUAL_ENV: fake/env

  quicksteps:
    name: Check quickstart steps
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Run quickstart steps
        run: |
          wget https://raw.githubusercontent.com/maykinmedia/open-personen/master/docker-compose-quickstart.yml -O docker-compose.yml
          docker-compose up -d
          docker-compose exec -T web src/manage.py import_demodata --url https://www.rvig.nl/binaries/rvig/documenten/richtlijnen/2018/09/20/testdataset-persoonslijsten-proefomgevingen-gba-v/20201126_Testset_persoonslijsten_proefomgeving_GBA-V.ods
          wget http://localhost:8000/api/ingeschrevenpersonen/999990676

  tests:
    name: Check unit tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt
          pip install codecov
      - name: Run unit tests with coverage
        run: |
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          DJANGO_SETTINGS_MODULE: openpersonen.conf.ci
          SECRET_KEY: dummy
          DB_NAME: postgres
          DB_PASSWORD: postgres
          DB_USER: postgres

  docker:
    needs: [openapiCheck, quicksteps, tests]

    name: Build (and push) Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo ::set-output name=tag::${VERSION}
      - name: Test printing steps vars outputs tag (remove this)
        run: echo ${{ steps.vars.outputs.tag }}

      - name: Build the Docker image
        env:
          #          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          RELEASE_VERSION: 'github-actions-test'
        run: docker build . --tag $IMAGE_NAME:$RELEASE_VERSION

      - name: Log into registry
        #        if: github.event_name == 'push'  # exclude PRs
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        #        if: github.event_name == 'push'  # exclude PRs
        env:
          #          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          RELEASE_VERSION: 'github-actions-test'
        run: docker push $IMAGE_NAME:$RELEASE_VERSION

